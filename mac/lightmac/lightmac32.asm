; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	c:\hub\lightmac\lightmac32.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	_speck64_encryptx
; Function compile flags: /Ogspy
;	COMDAT _speck64_encryptx
_TEXT	SEGMENT
_t$ = -8						; size = 4
_k2$ = -4						; size = 4
_k3$ = 8						; size = 4
_key$ = 8						; size = 4
_i$ = 12						; size = 4
_in$ = 12						; size = 4
_speck64_encryptx PROC					; COMDAT
; File c:\hub\lightmac\lightmac32.c
; Line 42
	push	ebp
	mov	ebp, esp
	push	ecx
	push	ecx
; Line 48
	mov	ecx, DWORD PTR _key$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [ecx+4]
	push	ebx
	push	esi
; Line 49
	mov	esi, DWORD PTR [ecx+8]
	mov	ecx, DWORD PTR [ecx+12]
	mov	DWORD PTR _k3$[ebp], ecx
; Line 52
	mov	ecx, DWORD PTR _in$[ebp]
; Line 54
	and	DWORD PTR _i$[ebp], 0
	push	edi
	mov	edi, DWORD PTR [ecx+4]
	mov	DWORD PTR _k2$[ebp], esi
	mov	esi, DWORD PTR [ecx]
$LL3@speck64_en:
; Line 64
	mov	ebx, DWORD PTR _k3$[ebp]
	ror	esi, 8
	add	esi, edi
	xor	esi, edx
	rol	edi, 3
	xor	edi, esi
	ror	eax, 8
	add	eax, edx
	xor	eax, DWORD PTR _i$[ebp]
	mov	DWORD PTR _t$[ebp], ebx
	mov	ebx, DWORD PTR _k2$[ebp]
	mov	DWORD PTR _k3$[ebp], ebx
	mov	ebx, DWORD PTR _t$[ebp]
	rol	edx, 3
	xor	edx, eax
	inc	DWORD PTR _i$[ebp]
	cmp	DWORD PTR _i$[ebp], 27			; 0000001bH
	mov	DWORD PTR _k2$[ebp], ebx
; Line 65
	mov	ebx, DWORD PTR _k3$[ebp]
	mov	DWORD PTR _k3$[ebp], eax
	mov	eax, ebx
	jb	SHORT $LL3@speck64_en
; Line 68
	mov	DWORD PTR [ecx+4], edi
	pop	edi
	mov	DWORD PTR [ecx], esi
	pop	esi
	pop	ebx
; Line 69
	leave
	ret	0
_speck64_encryptx ENDP
_TEXT	ENDS
PUBLIC	??_C@_05EOLGEGJL@?6?$CF08X?$AA@			; `string'
PUBLIC	_lightmac_tag
EXTRN	_printf:PROC
;	COMDAT ??_C@_05EOLGEGJL@?6?$CF08X?$AA@
CONST	SEGMENT
??_C@_05EOLGEGJL@?6?$CF08X?$AA@ DB 0aH, '%08X', 00H	; `string'
; Function compile flags: /Ogspy
CONST	ENDS
;	COMDAT _lightmac_tag
_TEXT	SEGMENT
_m$ = -8						; size = 8
_msg$ = 8						; size = 4
_msglen$ = 12						; size = 4
_tag$ = 16						; size = 4
_mkey$ = 20						; size = 4
_lightmac_tag PROC					; COMDAT
; Line 75
	push	ebp
	mov	ebp, esp
	push	ecx
	push	ecx
	push	ebx
; Line 83
	xor	ecx, ecx
	push	esi
	mov	esi, DWORD PTR _tag$[ebp]
; Line 86
	xor	ebx, ebx
	push	edi
	mov	edi, DWORD PTR _msg$[ebp]
	mov	DWORD PTR [esi], ecx
	mov	DWORD PTR [esi+4], ecx
; Line 89
	cmp	DWORD PTR _msglen$[ebp], ecx
	je	SHORT $LN5@lightmac_t
$LL6@lightmac_t:
; Line 91
	mov	al, BYTE PTR [edi]
	mov	BYTE PTR _m$[ebp+ecx+4], al
	inc	ecx
	inc	edi
; Line 93
	cmp	ecx, 4
	jne	SHORT $LN4@lightmac_t
; Line 95
	inc	ebx
; Line 96
	mov	eax, ebx
	bswap	eax
; Line 97
	push	ebx
	push	OFFSET ??_C@_05EOLGEGJL@?6?$CF08X?$AA@
	mov	DWORD PTR _m$[ebp], eax
	call	_printf
; Line 99
	lea	eax, DWORD PTR _m$[ebp]
	push	eax
	push	DWORD PTR _mkey$[ebp]
	call	_speck64_encryptx
; Line 101
	mov	eax, DWORD PTR _m$[ebp]
	xor	DWORD PTR [esi], eax
; Line 102
	mov	eax, DWORD PTR _m$[ebp+4]
	xor	DWORD PTR [esi+4], eax
	add	esp, 16					; 00000010H
; Line 104
	xor	ecx, ecx
$LN4@lightmac_t:
; Line 107
	dec	DWORD PTR _msglen$[ebp]
; Line 89
	jne	SHORT $LL6@lightmac_t
$LN5@lightmac_t:
; Line 110
	inc	ecx
	mov	BYTE PTR _m$[ebp+ecx+3], 128		; 00000080H
; Line 112
	je	SHORT $LN1@lightmac_t
	lea	edx, DWORD PTR _m$[ebp+4]
	mov	eax, esi
	sub	edx, esi
	mov	edi, ecx
$LL3@lightmac_t:
; Line 113
	mov	cl, BYTE PTR [edx+eax]
	xor	BYTE PTR [eax], cl
	inc	eax
	dec	edi
	jne	SHORT $LL3@lightmac_t
$LN1@lightmac_t:
; Line 116
	mov	eax, DWORD PTR _mkey$[ebp]
	add	eax, 16					; 00000010H
; Line 118
	push	esi
	push	eax
	call	_speck64_encryptx
	pop	ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
; Line 119
	leave
	ret	0
_lightmac_tag ENDP
_TEXT	ENDS
END
