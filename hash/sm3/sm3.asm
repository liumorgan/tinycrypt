; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	c:\hub\sm3\sm3.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	_SM3_Transform
; Function compile flags: /Ogspy
;	COMDAT _SM3_Transform
_TEXT	SEGMENT
_w$ = -304						; size = 272
_s$ = -32						; size = 32
tv352 = 8						; size = 4
_ctx$ = 8						; size = 4
_SM3_Transform PROC					; COMDAT
; File c:\hub\sm3\sm3.c
; Line 45
	push	ebp
	mov	ebp, esp
	sub	esp, 304				; 00000130H
; Line 59
	mov	eax, DWORD PTR _ctx$[ebp]
	push	ebx
	push	esi
	push	edi
	lea	esi, DWORD PTR [eax+8]
	push	32					; 00000020H
	lea	edi, DWORD PTR _s$[ebp]
	pop	ecx
	mov	DWORD PTR tv352[ebp], esi
	rep movsb
; Line 62
	xor	ecx, ecx
	add	eax, 40					; 00000028H
$LL14@SM3_Transf:
; Line 63
	mov	edx, DWORD PTR [eax]
	bswap	edx
	mov	DWORD PTR _w$[ebp+ecx*4], edx
	inc	ecx
	add	eax, 4
	cmp	ecx, 16					; 00000010H
	jb	SHORT $LL14@SM3_Transf
; Line 67
	push	52					; 00000034H
	lea	eax, DWORD PTR _w$[ebp]
	pop	edx
$LL11@SM3_Transf:
; Line 68
	mov	ecx, DWORD PTR [eax+52]
; Line 69
	mov	esi, DWORD PTR [eax+12]
	rol	ecx, 15					; 0000000fH
; Line 72
	xor	ecx, DWORD PTR [eax+28]
	xor	ecx, DWORD PTR [eax]
	rol	esi, 7
; Line 75
	mov	edi, ecx
	rol	edi, 23					; 00000017H
	xor	esi, edi
	mov	edi, ecx
	rol	edi, 15					; 0000000fH
	xor	esi, edi
	xor	esi, DWORD PTR [eax+40]
	add	eax, 4
	xor	esi, ecx
	dec	edx
	mov	DWORD PTR [eax+60], esi
	jne	SHORT $LL11@SM3_Transf
; Line 79
	xor	ebx, ebx
$LL25@SM3_Transf:
; Line 82
	mov	esi, DWORD PTR _s$[ebp]
; Line 86
	mov	edi, DWORD PTR _w$[ebp+ebx*4+16]
	rol	esi, 12					; 0000000cH
	cmp	ebx, 16					; 00000010H
	sbb	eax, eax
	and	eax, -12277873				; ff44a78fH
	add	eax, 2055708042				; 7a879d8aH
	mov	cl, bl
	rol	eax, cl
	mov	ecx, DWORD PTR _w$[ebp+ebx*4]
	xor	edi, ecx
	add	edi, DWORD PTR _s$[ebp+12]
	add	eax, DWORD PTR _s$[ebp+16]
; Line 87
	add	ecx, DWORD PTR _s$[ebp+28]
	add	eax, esi
	rol	eax, 7
	mov	edx, eax
	xor	edx, esi
	add	edx, edi
	add	ecx, eax
; Line 89
	cmp	ebx, 16					; 00000010H
	jae	SHORT $LN5@SM3_Transf
; Line 90
	mov	eax, DWORD PTR _s$[ebp+8]
	xor	eax, DWORD PTR _s$[ebp+4]
	xor	eax, DWORD PTR _s$[ebp]
	add	edx, eax
; Line 91
	mov	eax, DWORD PTR _s$[ebp+24]
	xor	eax, DWORD PTR _s$[ebp+20]
	xor	eax, DWORD PTR _s$[ebp+16]
; Line 92
	jmp	SHORT $LN26@SM3_Transf
$LN5@SM3_Transf:
; Line 93
	mov	eax, DWORD PTR _s$[ebp+4]
	or	eax, DWORD PTR _s$[ebp]
	mov	esi, DWORD PTR _s$[ebp+4]
	and	eax, DWORD PTR _s$[ebp+8]
	and	esi, DWORD PTR _s$[ebp]
	or	eax, esi
	add	edx, eax
; Line 94
	mov	eax, DWORD PTR _s$[ebp+24]
	xor	eax, DWORD PTR _s$[ebp+20]
	and	eax, DWORD PTR _s$[ebp+16]
	xor	eax, DWORD PTR _s$[ebp+24]
$LN26@SM3_Transf:
	add	ecx, eax
; Line 96
	mov	eax, DWORD PTR _s$[ebp+8]
	mov	DWORD PTR _s$[ebp+12], eax
; Line 97
	mov	eax, DWORD PTR _s$[ebp+4]
	rol	eax, 9
	mov	DWORD PTR _s$[ebp+8], eax
; Line 98
	mov	eax, DWORD PTR _s$[ebp]
	mov	DWORD PTR _s$[ebp+4], eax
; Line 100
	mov	eax, DWORD PTR _s$[ebp+24]
	mov	DWORD PTR _s$[ebp+28], eax
; Line 101
	mov	eax, DWORD PTR _s$[ebp+20]
	rol	eax, 19					; 00000013H
	mov	DWORD PTR _s$[ebp+24], eax
; Line 102
	mov	eax, DWORD PTR _s$[ebp+16]
	mov	DWORD PTR _s$[ebp+20], eax
	mov	DWORD PTR _s$[ebp], edx
; Line 103
	mov	eax, ecx
	rol	eax, 17					; 00000011H
	mov	edx, ecx
	rol	edx, 9
	xor	eax, edx
	xor	eax, ecx
	inc	ebx
	mov	DWORD PTR _s$[ebp+16], eax
	cmp	ebx, 64					; 00000040H
	jb	$LL25@SM3_Transf
; Line 107
	mov	eax, DWORD PTR tv352[ebp]
	pop	edi
	pop	esi
	xor	ecx, ecx
	pop	ebx
$LL3@SM3_Transf:
; Line 108
	mov	edx, DWORD PTR _s$[ebp+ecx*4]
	xor	DWORD PTR [eax], edx
	inc	ecx
	add	eax, 4
	cmp	ecx, 8
	jb	SHORT $LL3@SM3_Transf
; Line 118
	leave
	ret	0
_SM3_Transform ENDP
_TEXT	ENDS
PUBLIC	_SM3_Init
; Function compile flags: /Ogspy
;	COMDAT _SM3_Init
_TEXT	SEGMENT
_ctx$ = 8						; size = 4
_SM3_Init PROC						; COMDAT
; Line 126
	mov	eax, DWORD PTR _ctx$[esp-4]
; Line 134
	and	DWORD PTR [eax], 0
	and	DWORD PTR [eax+4], 0
	mov	DWORD PTR [eax+8], 1937774191		; 7380166fH
	mov	DWORD PTR [eax+12], 1226093241		; 4914b2b9H
	mov	DWORD PTR [eax+16], 388252375		; 172442d7H
	mov	DWORD PTR [eax+20], -628488704		; da8a0600H
	mov	DWORD PTR [eax+24], -1452330820		; a96f30bcH
	mov	DWORD PTR [eax+28], 372324522		; 163138aaH
	mov	DWORD PTR [eax+32], -477237683		; e38dee4dH
	mov	DWORD PTR [eax+36], -1325724082		; b0fb0e4eH
; Line 135
	ret	0
_SM3_Init ENDP
_TEXT	ENDS
PUBLIC	_SM3_Update
; Function compile flags: /Ogspy
;	COMDAT _SM3_Update
_TEXT	SEGMENT
_p$ = -4						; size = 4
_ctx$ = 8						; size = 4
_r$ = 12						; size = 4
_in$ = 12						; size = 4
_len$ = 16						; size = 4
_SM3_Update PROC					; COMDAT
; Line 142
	push	ebp
	mov	ebp, esp
	push	ecx
; Line 146
	mov	ecx, DWORD PTR _len$[ebp]
	mov	eax, DWORD PTR _in$[ebp]
	mov	DWORD PTR _p$[ebp], eax
	test	ecx, ecx
	je	SHORT $LN10@SM3_Update
; Line 149
	push	ebx
	mov	ebx, DWORD PTR _ctx$[ebp]
	mov	eax, DWORD PTR [ebx]
	and	eax, 63					; 0000003fH
; Line 152
	add	DWORD PTR [ebx], ecx
	push	esi
	push	edi
	adc	DWORD PTR [ebx+4], 0
$LL3@SM3_Update:
; Line 155
	mov	edx, DWORD PTR _len$[ebp]
	push	64					; 00000040H
	pop	ecx
	sub	ecx, eax
	mov	DWORD PTR _r$[ebp], edx
	cmp	edx, ecx
	jb	SHORT $LN8@SM3_Update
	mov	DWORD PTR _r$[ebp], ecx
$LN8@SM3_Update:
; Line 156
	mov	edx, DWORD PTR _r$[ebp]
	mov	esi, DWORD PTR _p$[ebp]
	mov	ecx, edx
; Line 157
	add	edx, eax
	lea	edi, DWORD PTR [ebx+eax+40]
	rep movsb
	cmp	edx, 64					; 00000040H
	jb	SHORT $LN14@SM3_Update
; Line 159
	push	ebx
	call	_SM3_Transform
	pop	ecx
; Line 160
	mov	ecx, DWORD PTR _r$[ebp]
	sub	DWORD PTR _len$[ebp], ecx
; Line 162
	add	DWORD PTR _p$[ebp], ecx
	xor	eax, eax
	cmp	DWORD PTR _len$[ebp], eax
	jne	SHORT $LL3@SM3_Update
$LN14@SM3_Update:
	pop	edi
	pop	esi
	pop	ebx
$LN10@SM3_Update:
; Line 164
	leave
	ret	0
_SM3_Update ENDP
_TEXT	ENDS
PUBLIC	_SM3_Final
; Function compile flags: /Ogspy
;	COMDAT _SM3_Final
_TEXT	SEGMENT
_out$ = 8						; size = 4
_ctx$ = 12						; size = 4
_SM3_Final PROC						; COMDAT
; Line 172
	push	ebx
	push	esi
; Line 176
	mov	esi, DWORD PTR _ctx$[esp+4]
	mov	edx, DWORD PTR [esi]
	push	edi
	and	edx, 63					; 0000003fH
; Line 178
	push	64					; 00000040H
	lea	ebx, DWORD PTR [edx+esi+40]
	pop	ecx
	sub	ecx, edx
	xor	al, al
	mov	edi, ebx
	rep stosb
; Line 180
	mov	BYTE PTR [ebx], 128			; 00000080H
; Line 182
	cmp	edx, 56					; 00000038H
	jb	SHORT $LN4@SM3_Final
; Line 183
	push	esi
	call	_SM3_Transform
	pop	ecx
; Line 185
	push	64					; 00000040H
	lea	edi, DWORD PTR [esi+40]
	xor	al, al
	pop	ecx
	rep stosb
$LN4@SM3_Final:
; Line 188
	mov	eax, DWORD PTR [esi]
	mov	ecx, DWORD PTR [esi+4]
	shld	ecx, eax, 3
	shl	eax, 3
	bswap	eax
	bswap	ecx
; Line 190
	push	esi
	mov	DWORD PTR [esi+96], ecx
	mov	DWORD PTR [esi+100], eax
	call	_SM3_Transform
	pop	ecx
; Line 193
	xor	ecx, ecx
	lea	eax, DWORD PTR [esi+8]
$LL3@SM3_Final:
; Line 194
	mov	edx, DWORD PTR [eax]
	mov	esi, DWORD PTR _out$[esp+8]
	bswap	edx
	mov	DWORD PTR [esi+ecx*4], edx
	inc	ecx
	add	eax, 4
	cmp	ecx, 8
	jl	SHORT $LL3@SM3_Final
; Line 196
	pop	edi
	pop	esi
	pop	ebx
	ret	0
_SM3_Final ENDP
_TEXT	ENDS
END
