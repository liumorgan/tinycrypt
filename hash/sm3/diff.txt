

    #define SIG0(x) (ROTR32(x, 7) ^ ROTR32(x,18) ^ ((x) >>  3))
    #define SIG1(x) (ROTR32(x,17) ^ ROTR32(x,19) ^ ((x) >> 10))

    // expand data into 512-bit buffer
    for (i=16; i<64; i++) {
      w[i] = SIG1(w[i-2]) + w[i-7] + SIG0(w[i-15]) + w[i-16];
    }
    
    
    #define P1(x) x ^ ROTL32(x, 15) ^ ROTL32(x, 23)
    
    for (i=16; i<68; i++) {
      x = ROTL32(w[i- 3], 15);
      y = ROTL32(w[i-13],  7);
      
      x ^= w[i-16];
      x ^= w[i- 9];
      y ^= w[i- 6];
      
      w[i] = P1(x) ^ y; 
    }    
    
    
    #define CH(x, y, z) (((x) & (y)) ^ (~(x) & (z)))
    #define MAJ(x, y, z) (((x) & (y)) ^ ((x) & (z)) ^ ((y) & (z)))

    #define EP0(x) (ROTR32(x,2) ^ ROTR32(x,13) ^ ROTR32(x,22))
    #define EP1(x) (ROTR32(x,6) ^ ROTR32(x,11) ^ ROTR32(x,25))
    
    t1 = s[7] + EP1(s[4]) + CH(s[4], s[5], s[6]) + w[i] + K[i];
    t2 = EP0(s[0]) + MAJ(s[0], s[1], s[2]);
    
    
    
    