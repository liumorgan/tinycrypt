; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	c:\hub\sha3\keccak\k800.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	_tv1
PUBLIC	_tv2
_DATA	SEGMENT
_tv1	DB	05dH
	DB	0d4H
	DB	031H
	DB	0e5H
	DB	0fbH
	DB	0c6H
	DB	04H
	DB	0f4H
	DB	099H
	DB	0bfH
	DB	0a0H
	DB	023H
	DB	02fH
	DB	045H
	DB	0f8H
	DB	0f1H
	DB	042H
	DB	0d0H
	DB	0ffH
	DB	051H
	DB	078H
	DB	0f5H
	DB	039H
	DB	0e5H
	DB	0a7H
	DB	080H
	DB	0bH
	DB	0f0H
	DB	064H
	DB	036H
	DB	097H
	DB	0afH
	DB	04cH
	DB	0f3H
	DB	05aH
	DB	0bfH
	DB	024H
	DB	024H
	DB	07aH
	DB	022H
	DB	015H
	DB	027H
	DB	017H
	DB	088H
	DB	084H
	DB	058H
	DB	068H
	DB	09fH
	DB	054H
	DB	0d0H
	DB	05cH
	DB	0b1H
	DB	0eH
	DB	0fcH
	DB	0f4H
	DB	01bH
	DB	091H
	DB	0faH
	DB	066H
	DB	061H
	DB	09aH
	DB	059H
	DB	09eH
	DB	01aH
	DB	01fH
	DB	0aH
	DB	097H
	DB	0a3H
	DB	087H
	DB	096H
	DB	065H
	DB	0abH
	DB	068H
	DB	08dH
	DB	0abH
	DB	0afH
	DB	015H
	DB	010H
	DB	04bH
	DB	0e7H
	DB	098H
	DB	01aH
	DB	00H
	DB	034H
	DB	0f3H
	DB	0efH
	DB	019H
	DB	041H
	DB	076H
	DB	0eH
	DB	0aH
	DB	093H
	DB	070H
	DB	080H
	DB	0b2H
	DB	087H
	DB	096H
	DB	0e9H
	DB	0efH
	DB	011H
	ORG $+4
_tv2	DB	0dH
	DB	02dH
	DB	0bfH
	DB	075H
	DB	089H
	DB	0eH
	DB	061H
	DB	09bH
	DB	040H
	DB	0afH
	DB	026H
	DB	0c8H
	DB	0abH
	DB	084H
	DB	0cdH
	DB	064H
	DB	0d6H
	DB	0bdH
	DB	05H
	DB	0f9H
	DB	035H
	DB	028H
	DB	083H
	DB	0bcH
	DB	0b9H
	DB	01H
	DB	080H
	DB	05fH
	DB	0ceH
	DB	02cH
	DB	066H
	DB	015H
	DB	05eH
	DB	0c9H
	DB	038H
	DB	08eH
	DB	043H
	DB	0e5H
	DB	01fH
	DB	070H
	DB	080H
	DB	043H
	DB	054H
	DB	01bH
	DB	0ffH
	DB	0deH
	DB	0acH
	DB	089H
	DB	0deH
	DB	0b5H
	DB	0edH
	DB	051H
	DB	0d9H
	DB	02H
	DB	097H
	DB	0eH
	DB	016H
	DB	0aaH
	DB	019H
	DB	06cH
	DB	0eeH
	DB	03eH
	DB	091H
	DB	0a2H
	DB	09aH
	DB	04eH
	DB	075H
	DB	060H
	DB	03cH
	DB	06H
	DB	019H
	DB	098H
	DB	054H
	DB	092H
	DB	070H
	DB	0f4H
	DB	084H
	DB	090H
	DB	09fH
	DB	0d0H
	DB	059H
	DB	0a2H
	DB	02dH
	DB	077H
	DB	0f7H
	DB	05dH
	DB	0b3H
	DB	01dH
	DB	062H
	DB	01H
	DB	0a6H
	DB	05aH
	DB	0d5H
	DB	025H
	DB	088H
	DB	035H
	DB	0abH
	DB	03bH
	DB	078H
	DB	0b3H
_DATA	ENDS
PUBLIC	_rc
; Function compile flags: /Ogspy
; File c:\hub\sha3\keccak\k800.c
;	COMDAT _rc
_TEXT	SEGMENT
_LFSR$ = 8						; size = 4
_rc	PROC						; COMDAT

; 36   : uint32_t rc (uint8_t *LFSR) {

	push	ebx
	push	esi

; 37   :     uint32_t c; 
; 38   :     int8_t   t;
; 39   :     uint8_t  i;
; 40   : 
; 41   :     c = 0;
; 42   :     t = *LFSR;

	mov	esi, DWORD PTR _LFSR$[esp+4]
	mov	dl, BYTE PTR [esi]
	push	edi
	xor	eax, eax

; 43   :     
; 44   :     for (i=1; i<128; i += i) 

	mov	bl, 1
$LL5@rc:

; 45   :     {
; 46   :       if (t & 1) {

	test	dl, 1
	je	SHORT $LN1@rc

; 47   :         // if shift value is < 32
; 48   :         if ((i-1) < 32) {

	movzx	ecx, bl
	lea	edi, DWORD PTR [ecx-1]
	cmp	edi, 32					; 00000020H
	jge	SHORT $LN1@rc

; 49   :           c ^= 1UL << (i - 1);

	xor	edi, edi
	dec	ecx
	inc	edi
	shl	edi, cl
	xor	eax, edi
$LN1@rc:

; 50   :         }
; 51   :       }
; 52   :       t = (t & 0x80) ? (t << 1) ^ 0x71 : t << 1;

	test	dl, dl
	jns	SHORT $LN8@rc
	add	dl, dl
	xor	dl, 113					; 00000071H
	jmp	SHORT $LN9@rc
$LN8@rc:
	add	dl, dl
$LN9@rc:

; 43   :     
; 44   :     for (i=1; i<128; i += i) 

	add	bl, bl
	cmp	bl, 128					; 00000080H
	jb	SHORT $LL5@rc

; 53   :     }
; 54   :     *LFSR = (uint8_t)t;

	pop	edi
	mov	BYTE PTR [esi], dl
	pop	esi
	pop	ebx

; 55   :     return c;
; 56   : }

	ret	0
_rc	ENDP
_TEXT	ENDS
PUBLIC	_k800_permute
; Function compile flags: /Ogspy
;	COMDAT _k800_permute
_TEXT	SEGMENT
_piln$ = -60						; size = 24
_bc$ = -36						; size = 20
_m5$ = -16						; size = 12
_lfsr$ = -1						; size = 1
tv1198 = 8						; size = 4
_state$ = 8						; size = 4
_k800_permute PROC					; COMDAT

; 58   : void k800_permute (void *state) {

	push	ebp
	mov	ebp, esp
	sub	esp, 60					; 0000003cH
	push	ebx

; 59   :     uint32_t i, j, r, t, u, bc[5];
; 60   :     uint8_t  lfsr=1;
; 61   :     uint32_t *st=(uint32_t*)state;
; 62   :     uint8_t  *p, *m;
; 63   :     int      rnd;
; 64   :     
; 65   :     uint32_t piln[6]=
; 66   :     { 0x110b070a, 0x10050312, 0x04181508, 
; 67   :       0x0d13170f, 0x0e14020c, 0x01060916 };
; 68   : 
; 69   :     uint32_t m5[3]=
; 70   :     { 0x03020100, 0x02010004, 0x00000403 };

	mov	ebx, DWORD PTR _state$[ebp]
	push	esi
	push	edi
	mov	BYTE PTR _lfsr$[ebp], 1
	mov	DWORD PTR _piln$[ebp], 285935370	; 110b070aH
	mov	DWORD PTR _piln$[ebp+4], 268763922	; 10050312H
	mov	DWORD PTR _piln$[ebp+8], 68687112	; 04181508H
	mov	DWORD PTR _piln$[ebp+12], 219354895	; 0d13170fH
	mov	DWORD PTR _piln$[ebp+16], 236192268	; 0e14020cH
	mov	DWORD PTR _piln$[ebp+20], 17172758	; 01060916H
	mov	DWORD PTR _m5$[ebp], 50462976		; 03020100H
	mov	DWORD PTR _m5$[ebp+4], 33619972		; 02010004H
	mov	DWORD PTR _m5$[ebp+8], 1027		; 00000403H
	mov	DWORD PTR tv1198[ebp], 22		; 00000016H
$LL21@k800_permu:

; 71   :     
; 72   :     p = (uint8_t*)piln;
; 73   :     m = (uint8_t*)m5;
; 74   :     
; 75   :     for (rnd=0; rnd<22; rnd++) {
; 76   :       // Theta
; 77   :       for (i=0; i<5; i++) {     

	xor	ecx, ecx
	lea	eax, DWORD PTR [ebx+60]
$LL18@k800_permu:

; 78   :         t  = st[i]; 
; 79   :         t ^= st[i +  5]; 
; 80   :         t ^= st[i + 10]; 
; 81   :         t ^= st[i + 15]; 
; 82   :         t ^= st[i + 20];

	mov	edx, DWORD PTR [eax-60]
	xor	edx, DWORD PTR [eax-40]
	xor	edx, DWORD PTR [eax-20]
	xor	edx, DWORD PTR [eax+20]
	xor	edx, DWORD PTR [eax]
	inc	ecx

; 83   :         bc[i] = t;

	mov	DWORD PTR _bc$[ebp+ecx*4-4], edx
	add	eax, 4
	cmp	ecx, 5
	jb	SHORT $LL18@k800_permu

; 84   :       }
; 85   :       for (i=0; i<5; i++) {

	xor	edx, edx
$LL15@k800_permu:

; 86   :         t  = bc[m[(i + 4)]]; 
; 87   :         t ^= ROTL32(bc[m[(i + 1)]], 1);

	movzx	eax, BYTE PTR _m5$[ebp+edx+1]
	mov	eax, DWORD PTR _bc$[ebp+eax*4]
	movzx	ecx, BYTE PTR _m5$[ebp+edx+4]
	rol	eax, 1
	xor	eax, DWORD PTR _bc$[ebp+ecx*4]

; 88   :         for (j=i; j<25; j+=5) {

	mov	ecx, edx
	cmp	edx, 25					; 00000019H
	jae	SHORT $LN14@k800_permu
$LL12@k800_permu:

; 89   :           st[j] ^= t;

	xor	DWORD PTR [ebx+ecx*4], eax
	add	ecx, 5
	cmp	ecx, 25					; 00000019H
	jb	SHORT $LL12@k800_permu
$LN14@k800_permu:

; 84   :       }
; 85   :       for (i=0; i<5; i++) {

	inc	edx
	cmp	edx, 5
	jb	SHORT $LL15@k800_permu

; 90   :         }
; 91   :       }
; 92   :       // Rho Pi
; 93   :       u = st[1];

	mov	esi, DWORD PTR [ebx+4]

; 94   :       
; 95   :       __asm int 3;

	int	3

; 96   :       
; 97   :       for (i=0, r=0; i<24; i++) {

	xor	edx, edx
	xor	ecx, ecx
$LL9@k800_permu:

; 98   :         r += i + 1;       
; 99   :         u  = ROTL32(u, r);
; 100  :         XCHG(st[p[i]], u);

	movzx	eax, BYTE PTR _piln$[ebp+edx]
	lea	ecx, DWORD PTR [ecx+edx+1]
	rol	esi, cl
	lea	eax, DWORD PTR [ebx+eax*4]
	mov	edi, DWORD PTR [eax]
	inc	edx
	mov	DWORD PTR [eax], esi
	mov	esi, edi
	cmp	edx, 24					; 00000018H
	jb	SHORT $LL9@k800_permu

; 101  :         bc[0] = u;
; 102  :       }
; 103  :       // Chi
; 104  :       for (i=0; i<25; i+=5) {

	push	5
	mov	eax, ebx
	pop	edx
$LL38@k800_permu:

; 105  :         memcpy(&bc, &st[i], 5*4);      

	push	5
	pop	ecx
	mov	esi, eax
	lea	edi, DWORD PTR _bc$[ebp]
	rep movsd

; 106  :         for (j=0; j<5; j++) {

	xor	ecx, ecx
$LL3@k800_permu:

; 107  :           t  = ~bc[m[(j + 1)]];
; 108  :           t &=  bc[m[(j + 2)]];        
; 109  :           st[j + i] ^= t;

	movzx	esi, BYTE PTR _m5$[ebp+ecx+1]
	mov	esi, DWORD PTR _bc$[ebp+esi*4]
	movzx	edi, BYTE PTR _m5$[ebp+ecx+2]
	not	esi
	and	esi, DWORD PTR _bc$[ebp+edi*4]
	xor	DWORD PTR [eax], esi
	inc	ecx
	add	eax, 4
	cmp	ecx, 5
	jb	SHORT $LL3@k800_permu

; 101  :         bc[0] = u;
; 102  :       }
; 103  :       // Chi
; 104  :       for (i=0; i<25; i+=5) {

	dec	edx
	jne	SHORT $LL38@k800_permu

; 110  :         }
; 111  :       }
; 112  :       // Iota
; 113  :       st[0] ^= rc(&lfsr);

	lea	eax, DWORD PTR _lfsr$[ebp]
	push	eax
	call	_rc
	xor	DWORD PTR [ebx], eax
	dec	DWORD PTR tv1198[ebp]
	pop	ecx
	jne	$LL21@k800_permu
	pop	edi
	pop	esi
	pop	ebx

; 114  :     }
; 115  : }

	leave
	ret	0
_k800_permute ENDP
_TEXT	ENDS
PUBLIC	??_C@_07PCGKDMI@0x?$CF02x?0?$AA@		; `string'
PUBLIC	_bin2hex
EXTRN	_printf:PROC
EXTRN	_putchar:PROC
;	COMDAT ??_C@_07PCGKDMI@0x?$CF02x?0?$AA@
CONST	SEGMENT
??_C@_07PCGKDMI@0x?$CF02x?0?$AA@ DB '0x%02x,', 00H	; `string'
; Function compile flags: /Ogspy
CONST	ENDS
;	COMDAT _bin2hex
_TEXT	SEGMENT
_x$ = 8							; size = 4
_len$ = 12						; size = 4
_bin2hex PROC						; COMDAT

; 151  : void bin2hex(uint8_t x[], int len) {

	push	ebx

; 152  :   int i;
; 153  :   for (i=0; i<len; i++) {

	xor	ebx, ebx
	cmp	DWORD PTR _len$[esp], ebx
	jle	SHORT $LN2@bin2hex
$LL4@bin2hex:

; 154  :     if ((i & 7)==0) putchar('\n');

	test	bl, 7
	jne	SHORT $LN1@bin2hex
	push	10					; 0000000aH
	call	_putchar
	pop	ecx
$LN1@bin2hex:

; 155  :     printf ("0x%02x,", x[i]);

	mov	eax, DWORD PTR _x$[esp]
	movzx	eax, BYTE PTR [ebx+eax]
	push	eax
	push	OFFSET ??_C@_07PCGKDMI@0x?$CF02x?0?$AA@
	call	_printf
	inc	ebx
	pop	ecx
	pop	ecx
	cmp	ebx, DWORD PTR _len$[esp]
	jl	SHORT $LL4@bin2hex
$LN2@bin2hex:

; 156  :   }
; 157  :   putchar('\n');

	push	10					; 0000000aH
	call	_putchar
	pop	ecx
	pop	ebx

; 158  : }

	ret	0
_bin2hex ENDP
_TEXT	ENDS
PUBLIC	??_C@_0L@PGJPJOEK@Test?52?5?$CFs?6?$AA@		; `string'
PUBLIC	??_C@_0L@HAALOMOE@Test?51?5?$CFs?6?$AA@		; `string'
PUBLIC	??_C@_02GIPFHKNO@OK?$AA@			; `string'
PUBLIC	??_C@_06CMLPEGNC@Failed?$AA@			; `string'
PUBLIC	_main
EXTRN	_memset:PROC
;	COMDAT ??_C@_0L@PGJPJOEK@Test?52?5?$CFs?6?$AA@
CONST	SEGMENT
??_C@_0L@PGJPJOEK@Test?52?5?$CFs?6?$AA@ DB 'Test 2 %s', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@HAALOMOE@Test?51?5?$CFs?6?$AA@
CONST	SEGMENT
??_C@_0L@HAALOMOE@Test?51?5?$CFs?6?$AA@ DB 'Test 1 %s', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_02GIPFHKNO@OK?$AA@
CONST	SEGMENT
??_C@_02GIPFHKNO@OK?$AA@ DB 'OK', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_06CMLPEGNC@Failed?$AA@
CONST	SEGMENT
??_C@_06CMLPEGNC@Failed?$AA@ DB 'Failed', 00H		; `string'
; Function compile flags: /Ogspy
CONST	ENDS
;	COMDAT _main
_TEXT	SEGMENT
_out$ = -100						; size = 100
_main	PROC						; COMDAT

; 161  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 100				; 00000064H
	push	ebx
	push	esi
	push	edi

; 162  :   uint8_t  out[100];
; 163  :   int      equ;
; 164  :   
; 165  :   memset(out, 0, sizeof(out));

	push	100					; 00000064H
	lea	eax, DWORD PTR _out$[ebp]
	push	0
	push	eax
	call	_memset

; 166  :   
; 167  :   k800_permute(out);

	lea	eax, DWORD PTR _out$[ebp]
	push	eax
	call	_k800_permute
	add	esp, 16					; 00000010H

; 168  :   equ = memcmp(out, tv1, sizeof(tv1))==0;

	push	100					; 00000064H
	pop	ecx
	mov	edi, OFFSET _tv1
	lea	esi, DWORD PTR _out$[ebp]
	xor	eax, eax
	repe cmpsb
	je	SHORT $LN7@main
	sbb	eax, eax
	sbb	eax, -1
$LN7@main:
	test	eax, eax
	mov	ebx, OFFSET ??_C@_06CMLPEGNC@Failed?$AA@

; 169  :   printf("Test 1 %s\n", equ ? "OK" : "Failed"); 

	mov	eax, OFFSET ??_C@_02GIPFHKNO@OK?$AA@
	je	SHORT $LN4@main
	mov	eax, ebx
$LN4@main:
	push	eax
	push	OFFSET ??_C@_0L@HAALOMOE@Test?51?5?$CFs?6?$AA@
	call	_printf

; 170  :   bin2hex(out, 100);

	lea	eax, DWORD PTR _out$[ebp]
	push	100					; 00000064H
	push	eax
	call	_bin2hex

; 171  : 
; 172  :   k800_permute(out);

	lea	eax, DWORD PTR _out$[ebp]
	push	eax
	call	_k800_permute
	add	esp, 20					; 00000014H

; 173  :   equ = memcmp(out, tv2, sizeof(tv2))==0;

	push	100					; 00000064H
	pop	ecx
	mov	edi, OFFSET _tv2
	lea	esi, DWORD PTR _out$[ebp]
	xor	eax, eax
	repe cmpsb
	je	SHORT $LN8@main
	sbb	eax, eax
	sbb	eax, -1
$LN8@main:
	test	eax, eax

; 174  :   printf("Test 2 %s\n", equ ? "OK" : "Failed");

	jne	SHORT $LN5@main
	mov	ebx, OFFSET ??_C@_02GIPFHKNO@OK?$AA@
$LN5@main:
	push	ebx
	push	OFFSET ??_C@_0L@PGJPJOEK@Test?52?5?$CFs?6?$AA@
	call	_printf
	pop	ecx
	pop	ecx
	pop	edi
	pop	esi

; 175  :   //bin2hex(out, 100);
; 176  : 
; 177  :   return 0;

	xor	eax, eax
	pop	ebx

; 178  : }

	leave
	ret	0
_main	ENDP
_TEXT	ENDS
END
