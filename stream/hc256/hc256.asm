; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	c:\hub\hc256\hc256.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	_hc256_generate
; Function compile flags: /Ogspy
;	COMDAT _hc256_generate
_TEXT	SEGMENT
tv239 = -4						; size = 4
_x1$ = 8						; size = 4
_c$ = 8							; size = 4
_hc256_generate PROC					; COMDAT
; File c:\hub\hc256\hc256.c
; Line 34
	push	ebp
	mov	ebp, esp
	push	ecx
; Line 39
	mov	eax, DWORD PTR _c$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ebx
	push	esi
; Line 41
	lea	edx, DWORD PTR [ecx+1]
	and	edx, 2047				; 000007ffH
	push	edi
	mov	DWORD PTR [eax], edx
; Line 43
	lea	esi, DWORD PTR [eax+4]
; Line 44
	lea	edi, DWORD PTR [eax+4100]
; Line 46
	mov	eax, 1023				; 000003ffH
	mov	edx, esi
	mov	DWORD PTR _x1$[ebp], edi
	cmp	ecx, eax
	jbe	SHORT $LN4@hc256_gene
; Line 47
	mov	edx, edi
; Line 48
	mov	DWORD PTR _x1$[ebp], esi
$LN4@hc256_gene:
; Line 51
	and	ecx, eax
; Line 52
	lea	esi, DWORD PTR [ecx-3]
	and	esi, eax
; Line 58
	mov	esi, DWORD PTR [edx+esi*4]
	lea	edi, DWORD PTR [ecx+1]
	and	edi, eax
	mov	edi, DWORD PTR [edx+edi*4]
	mov	ebx, esi
	ror	ebx, 10					; 0000000aH
	mov	DWORD PTR tv239[ebp], edi
	xor	esi, DWORD PTR tv239[ebp]
	rol	edi, 9
	xor	ebx, edi
	mov	edi, DWORD PTR _x1$[ebp]
	and	esi, eax
	add	ebx, DWORD PTR [edi+esi*4]
	lea	esi, DWORD PTR [ecx-10]
	and	esi, eax
	add	ebx, DWORD PTR [edx+esi*4]
	push	4
	add	DWORD PTR [edx+ecx*4], ebx
	mov	esi, DWORD PTR [edx+ecx*4]
; Line 60
	add	ecx, -12				; fffffff4H
	and	ecx, eax
; Line 63
	mov	edx, DWORD PTR [edx+ecx*4]
; Line 65
	xor	eax, eax
	pop	ecx
$LL3@hc256_gene:
; Line 66
	mov	ebx, edx
	and	ebx, 255				; 000000ffH
	add	eax, DWORD PTR [edi+ebx*4]
; Line 67
	shr	edx, 8
; Line 68
	add	edi, 1024				; 00000400H
	dec	ecx
	jne	SHORT $LL3@hc256_gene
; Line 70
	pop	edi
	xor	eax, esi
	pop	esi
	pop	ebx
; Line 73
	leave
	ret	0
_hc256_generate ENDP
_TEXT	ENDS
PUBLIC	_hc256_setkey
EXTRN	__chkstk:PROC
EXTRN	_memcpy:PROC
; Function compile flags: /Ogspy
;	COMDAT _hc256_setkey
_TEXT	SEGMENT
_W$ = -16384						; size = 16384
_c$ = 8							; size = 4
_i$ = 12						; size = 4
_kiv$ = 12						; size = 4
_hc256_setkey PROC					; COMDAT
; Line 77
	push	ebp
	mov	ebp, esp
	mov	eax, 16384				; 00004000H
	call	__chkstk
; Line 81
	mov	eax, DWORD PTR _c$[ebp]
	and	DWORD PTR [eax], 0
	push	esi
; Line 84
	mov	esi, DWORD PTR _kiv$[ebp]
	push	edi
	push	16					; 00000010H
	pop	eax
	mov	ecx, eax
	lea	edi, DWORD PTR _W$[ebp]
	rep movsd
; Line 87
	mov	DWORD PTR _i$[ebp], eax
	lea	eax, DWORD PTR _W$[ebp+56]
	mov	esi, 4096				; 00001000H
	push	ebx
$LL6@hc256_setk:
; Line 89
	mov	ecx, DWORD PTR [eax-52]
	mov	edx, DWORD PTR [eax]
	mov	edi, ecx
	rol	edi, 14					; 0000000eH
	mov	ebx, ecx
	shr	ecx, 3
	ror	ebx, 7
	xor	edi, ebx
	xor	edi, ecx
	mov	ecx, edx
	rol	ecx, 15					; 0000000fH
	mov	ebx, edx
	rol	ebx, 13					; 0000000dH
	xor	ecx, ebx
	shr	edx, 10					; 0000000aH
	xor	ecx, edx
	add	edi, ecx
	add	edi, DWORD PTR [eax-56]
	add	eax, 4
	add	edi, DWORD PTR [eax-24]
	add	edi, DWORD PTR _i$[ebp]
	inc	DWORD PTR _i$[ebp]
	mov	DWORD PTR [eax+4], edi
	cmp	DWORD PTR _i$[ebp], esi
	jb	SHORT $LL6@hc256_setk
; Line 93
	mov	edi, DWORD PTR _c$[ebp]
	push	8192					; 00002000H
	lea	eax, DWORD PTR _W$[ebp+2048]
	push	eax
	lea	eax, DWORD PTR [edi+4]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
	pop	ebx
$LL3@hc256_setk:
; Line 97
	push	edi
	call	_hc256_generate
	dec	esi
	pop	ecx
	jne	SHORT $LL3@hc256_setk
	pop	edi
	pop	esi
; Line 99
	leave
	ret	0
_hc256_setkey ENDP
_TEXT	ENDS
PUBLIC	_hc256_crypt
; Function compile flags: /Ogspy
;	COMDAT _hc256_crypt
_TEXT	SEGMENT
_c$ = 8							; size = 4
_in$ = 12						; size = 4
_inlen$ = 16						; size = 4
_hc256_crypt PROC					; COMDAT
; Line 103
	push	ebp
	mov	ebp, esp
	push	esi
; Line 108
	xor	esi, esi
	cmp	DWORD PTR _inlen$[ebp], esi
	jbe	SHORT $LN11@hc256_cryp
$LL5@hc256_cryp:
; Line 109
	push	DWORD PTR _c$[ebp]
	call	_hc256_generate
	pop	ecx
; Line 111
	xor	edx, edx
$LL3@hc256_cryp:
	cmp	esi, DWORD PTR _inlen$[ebp]
	jae	SHORT $LN11@hc256_cryp
	mov	ecx, DWORD PTR _in$[ebp]
; Line 112
	xor	BYTE PTR [ecx+esi], al
	inc	esi
; Line 113
	shr	eax, 8
	inc	edx
	cmp	edx, 4
	jb	SHORT $LL3@hc256_cryp
; Line 108
	cmp	esi, DWORD PTR _inlen$[ebp]
	jb	SHORT $LL5@hc256_cryp
$LN11@hc256_cryp:
	pop	esi
; Line 116
	pop	ebp
	ret	0
_hc256_crypt ENDP
_TEXT	ENDS
END
